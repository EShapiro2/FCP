Concurrent Prolog Programming Techniques                       Fall, 1986

Instructor: William Silverman

Assignment No. 6    Due Monday, January 19, 1987

This is a programming assignment.  It should be handed in
together with a script of its execution.


Give a direct behavioral definition of the following circuits.
You may use auxiliary processes which have no direct
'circuitry' equivalent.


(1) :

% half_adder(In1,In2,Out1,Out1) :-
%	Out1 is the 'xor' and Out2 is the 'and' of In1 and In2.


(2) :

% full_adder(In1,In2,Cin,Out,Cout) :-
%	Out is the result of adding In1, In2, and Cin,
%	with carry Cout.


Test your programs using (and modifying, if needed) the word_adder.

% word_adder(As,Bs,Cin,Os,Cout) :-
%	Out is the result of adding the word As to the word Bs
%	given carry Cin, with resulting carry Cout.

word_adder([A|As],[B|Bs],Cin,[Out|Os],Cout) :-
	full_adder(A?,B?,Cin?,Out,Cint),
	word_adder(As?,Bs?,Cint?,Os,Cout).
word_adder([],[],C,[],C).

a_word(a,[[0],[1],[1],[1]]).
a_word(b,[[1],[1],[0],[1]]).


test_adder(Wa,Wb,Out,Cout) :-
	a_word(Wa?,As),
	a_word(Wb?,Bs),
	word_adder(As?,Bs?,[0],Out,Cout).


(3) Implement a 3-way fair merger,
	1) assuming a stable machine
	2) Using unknown

