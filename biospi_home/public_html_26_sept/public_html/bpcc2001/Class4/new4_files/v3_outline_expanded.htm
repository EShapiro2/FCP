<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1255">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 9">
<link id=Main-File rel=Main-File href="../new3.htm">
<link rel=Preview href=preview.wmf>

<script>
<!--
if( window.name != "PPTOtl" )
  parent.location.href = "../new3.htm";
//-->
</script>
<meta name=Robots content=NoIndex>
</head>

<body bgcolor=black text=white link=white vlink=white alink=white>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0301.htm');">Notices</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Instantaneous channels (with infinite
  rate) are a separate type of channel, distinct from the usual (rated) ones,
  and cannot be used for symmetric interactions</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>A call for a process (Remote Process
  Call = RPC) has the general form LogixPath#LogixGoal</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0354.htm');">Notices</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>LogixPath may be the name of a module
  (e.g. nacl_1) or a transformation of a UNIX path:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	dir<sub>1</sub>/dir<sub>2</sub>/…/dir<sub>n</sub>/module.bin
  </font><font face=Wingdings size=2>&agrave;</font><font face="Comic Sans MS" size=2>
  </font><font face=Arial size=2>dir<sub>1</sub>#dir<sub>2</sub>#…#dir<sub>n</sub>#module</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>LOGIX treats an alphanumeric name which
  begins with a lower case letter as a string, hence it does not require quotes</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Any other names starting with upper
  case letter (except for Logix variables) require quotes</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>LogixGoal may be any process defined
  within the target module. Since BioPSI processes start with upper case letter
  they must be quoted</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0289.htm');">Unit 2: Molecules,
Radicals and Functional Groups</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0297.htm');">Radicals and Functional
Groups</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Free radicals are highly reactive,
  typically univalent, “parts” of molecules</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Organic compounds are composed of functional
  groups</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>A functional group is the the part of a
  molecule having a special arrangement of atoms that is largely responsible
  for the chemical behavior of the parent molecule</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>We focus on reactions involving almost
  exclusively organic compounds and functional groups</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0294.htm');">A Modular Approach to
Radicals, Groups and Compounds</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>For a reaction of the type</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>A+B </font><font face=Wingdings size=2>&agrave;</font><font
  face="Comic Sans MS" size=2> C</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>We will</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Represent A, B as processes</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>Upon interaction</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>A, B processes will be terminated</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>A new process, C, will be spawned</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Example: O + H </font><font
  face=Wingdings size=2>&agrave;</font><font face="Comic Sans MS" size=2> O</font><font
  face=Arial size=2><sub>2</sub> + H<sub>2</sub> + H<sub>2</sub>O</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0295.htm');">A Modular Approach to
Radicals, Groups and Compounds</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>For reverse unimolecular reaction</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>C </font><font face=Wingdings size=2>&agrave;</font><font
  face="Comic Sans MS" size=2> A + B</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Before, we had two counterparts
  (Bound_A and Bound_B) which unbound from each other</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Now, we have a single reactant process
  C</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>In the pi-calculus we are limited to
  pair wise interactions</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0296.htm');">A Modular Approach to
Radicals, Groups and Compounds</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>We will add a Timer process that will
  offer the complementary communication required by the pi-calculus.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>We will use a single instance of this
  process to ensure a correct rate calculation</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0299.htm');">Condensation and
hydrolysis</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0300.htm');">RNH<sub>2</sub> + RCOOH <font
face=Symbol>«</font><font face="Comic Sans MS"> RNHCOR + H<sub>2</sub>O</font></a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>-language(psifcp).<br>
  global(amine(10),hydrolysis(1)).</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>R_Amine+eRN::= NH2(eRN) | R(eRN)
  .<br>
  R_Carboxyl+eRC::= R(eRC) | COOH(eRC) .<br>
  NH2(eRN)::=</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun: yes">&nbsp;
  </span>amine ? {eRC1} , Amide(eRN,eRC1) | H2O .<br>
  Amide(eRN,eRC)::=
  <br>
  <span style="mso-spacerun: yes">&nbsp; </span>hydrolysis ? [] , COOH(eRC)
  |<span style="mso-spacerun: yes">&nbsp; </span>NH2(eRN) .<br>
  COOH(eRC)::=
  amine ! {eRC} , true .</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>R(e)::= e ! [] , self .<br>
  H2O::= hydrolysis
  ! [] , true .</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0335.htm');">Unit 3: Programming and
Tracing Polymers, Compartments and other Quantitative Aspects</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0298.htm');">Chain Reaction and
Polymerization</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Multi-step reaction mechanisms in which
  certain steps may be repeated indefinitely.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Typically involve three types of steps</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Intiation reaction</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Chain propagation reaction(s)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Chain termination reaction</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Occur in flames, explosions,
  atmosphetic and life processes, and are important for the creation of
  synthetic polymers</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0382.htm');">Polymerization</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0310.htm');">Synthetic polymers:
Polyethylene</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Initiation<br>
  Y + CH2=CH2 </font><font
  face=Wingdings size=2>&agrave;</font><font face="Comic Sans MS" size=2> Y</font><font
  face=Arial size=2>-CH2-CH2*</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Propagation</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	Y-(CH2-CH2)<sub>n</sub>- CH2-CH2* + CH2=CH2
  </font><font face=Wingdings size=2>&agrave;</font><font face="Comic Sans MS" size=2>
  Y-(CH2-CH2)</font><font face=Arial size=2><sub>n</sub><sub>+1</sub>-CH2-CH2*</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Termination</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>	Y-(CH2-CH2)<sub>n</sub>- CH2-CH2* +
  <br>
  Y-(CH2-CH2)<sub>m</sub>- CH2-CH2*<span style="mso-spacerun:
  yes">&nbsp; </span></font><font face=Wingdings size=2>&agrave;</font><font
  face="Comic Sans MS" size=2> <br>
  Y-(CH2-CH2)</font><font face=Arial
  size=2><sub>m+n+2</sub>-Y</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0313.htm');">Polyethylene - Initiation</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Y + CH2=CH2<span style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp; </span></font><font face=Wingdings size=2>&agrave;</font><font
  face="Comic Sans MS" size=2><span style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Y----CH2-CH2*</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0314.htm');">Polyethylene -
Propagation</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Y-------------(CH2-CH2)------------(CH2-CH2)------------CH2-CH2*<span
  style="mso-spacerun: yes">&nbsp; </span>+<span style="mso-spacerun:
  yes">&nbsp; </span>CH2=CH2</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Wingdings size=2>&agrave;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="Comic Sans MS" size=2><span style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span>Y-(CH2-CH2)</font><font face=Arial size=2><sub>2</sub>--------<span
  style="mso-spacerun: yes">&nbsp; </span>CH2-CH2 -------CH2-CH2*</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0315.htm');">Polyethylene -
Termination</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Y-(CH2-CH2)<sub>n</sub>---- CH2-CH2* +
  Y-(CH2-CH2)<sub>m</sub>---- CH2-CH2*</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Wingdings size=2>&agrave;</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="Comic Sans MS" size=2>Y-(CH2-CH2)</font><font
  face=Arial size=2><sub>n</sub>- CH2-CH2 ------CH2-CH2<sub> </sub>-(CH2-CH2)<sub>m</sub>-
  Y</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0311.htm');">Polyethylene</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>-language(psifcp).<br>
  global(dummy,
  alkene_Y(1), alkene_R(10), poly_R(1)).<br>
  System(N1,N2)::= <br>
  	CREATE_Y(N1)
  | CREATE_Ethylene(N2) .<br>
  	CREATE_Y(C)::= 	<br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{C
  =&lt; 0} , true ;<br>
  	 {C &gt; 0} , {C--} | Y | self .<br>
  	CREATE_Ethylene(C)::=
  <br>
  	 {C =&lt; 0} , true ;<br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{C
  &gt; 0} , {C--} | Ethylene | self .</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0312.htm');">Polyethylene</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Y+polyCC::= <br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp; </span>alkene_Y ! {polyCC} ,
  Y_bound(polyCC) .<br>
  Y_bound(polyCC)::= dummy ? [] , true .</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Ethylene::= <br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp; </span>alkene_Y ? {polyCC_L} ,
  EthylR(polyCC_L) ;<br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp; </span>alkene_R ? {polyCC_L} ,
  EthylR(polyCC_L) . EthylR(polyCC_L)+polyCC_R::= <br>
  <span
  style="mso-spacerun: yes">&nbsp;&nbsp; </span>alkene_R ! {polyCC_R} ,
  EthylP(polyCC_L, polyCC_R) ;<br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp; </span>poly_R ! {polyCC_R} ,
  EthylP_term(polyCC_L, polyCC_R);<br>
  <span style="mso-spacerun:
  yes">&nbsp;&nbsp; </span>poly_R ? {polyCC_R’} , EthylP_term(polyCC_L,
  polyCC_R’). EthylP(polyCC_L, polyCC_R)::= <br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp; </span>dummy
  ? [] , true . <br>
  EthylP_term(polyCC_L, polyCC_R)::= <br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp; </span>dummy
  ? [] , true .</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0316.htm');">Initiation</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0317.htm');">Propagation</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0318.htm');">Termination</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0319.htm');">Polyethylene <br>
(100
Ethylene ; 2 Y seeds)</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0350.htm');">Polyethylene<br>
(200
Ethylene, 4 Y seeds)</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0320.htm');">What Else Would We Like
to Trace?</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>What is the length of each molecule?</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>What is the position of each of the
  monomers inside the polymer?</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>How can we follow the process of
  polymerization?</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0303.htm');">Nucleic Acids</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0302.htm');">Phosphodiester Bonds and
Nucleic Acid Polymerization</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0304.htm');">Nucleic Acid
Polymerization is Directional</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Polymerization proceeds in the 5’</font><font
  face=Wingdings size=2>&agrave;</font><font face="Comic Sans MS" size=2>3’</font><font
  face=Arial size=2> direction:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>The 5’ phosphate of a free nucleotide binds
  to the 3’ growing end of an existing chain</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>In cells this process requires a
  complex machinery (as we will learn later on)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>For now, we will focus on the chain
  propagation mechanism.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0290.htm');">Phosphodiester Bonds and
Nucleic Acid Polymerization</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0291.htm');">Nucleic Acid
Polymerization</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>-language(psifcp).<br>
  global(hydroxyl_P(1)).<br>
  System(N1,N2)::= <br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp; </span>&lt;&lt;
  CREATE_Nucleotide(N1) | <br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span>CREATE_Seed_Nucleotide(N2).</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>CREATE_Nucleotide(C)::= <br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span>{C =&lt; 0} , true ;<br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span>{C &gt; 0} , {C--} | Nucleotide | self .<br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span>CREATE_Seed_Nucleotide(C)::= <br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span>{C =&lt; 0} , true ;<br>
  <span style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{C &gt; 0} , {C--} | Seed_Nucleotide
  | self<br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp; </span>&gt;&gt; .</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0321.htm');">Nucleic Acid
Polymerization</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Seed_Nucleotide::=<br>
  &lt;&lt; hydroxyl_P ? {pd_ester} , Seed_Bound(pd_ester) .<br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp; </span>Seed_Bound(pd_ester)::=
  <br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>pd_ester !
  [] , Seed_Nucleotide &gt;&gt; .</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Nucleotide+pde(0.001)::= <br>
  &lt;&lt;<span style="mso-spacerun: yes">&nbsp; </span>hydroxyl_P ! {pde} , Nucleotide_5_Bound(pde)
  .<br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Nucleotide_5_Bound(pde)::=
  <br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pde ?
  [] , Nucleotide ;<br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span>hydroxyl_P ? {pd_ester} , <br>
  <span style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Nucleotide_5_3_Bound(pde,pd_ester).<br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Nucleotide_3_Bound(pd_ester)::=<br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span>pd_ester ! [] , Nucleotide<span style="mso-spacerun: yes">&nbsp;
  </span>.<br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Nucleotide_5_3_Bound(pde,pd_ester)::=<br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span>pde ? [] , Nucleotide_3_Bound(pd_ester) ;<br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span>pd_ester ! [] , Nucleotide_5_Bound(pde) &gt;&gt; .</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0322.htm');">Initiation</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0323.htm');">Elongation</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0324.htm');">Cleavage</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0292.htm');">Phosphodiester bonds and
nucleic acid polymerization</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0383.htm');">What Else Would We Like
to Trace?</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>What is the length of each molecule?</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>What is the position of each of the
  monomers inside the polymer?</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>How can we follow the process of
  polymerization?</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Which chains are formed by cleavage?</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0305.htm');">Exercise 4 – Question 1</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Does the nucleic acid program ensure
  directionality? Explain your answer</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0371.htm');">Exercise 4 – Question 2</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>A similar directional polymer is formed
  from monomer amino acids by the creation of a peptide bond. Each amino acid
  has two functional groups: an amine group and a carboxyl group. The two can
  form an amide (peptide) bond (See previous lesson). The resulting polymer is
  a polypeptide.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0384.htm');">Exercise 4 – Question 2</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Based on the nucleic acid example,
  write a program for the formation and cleavage of such “polypeptides”</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Assume:</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>The polypeptide is initiated from a
  Seed</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>It is created in a directional fashion
  <br>
  COOH (in seed or end of existing polymer) </font><font
  face=Wingdings size=2>&szlig;</font><font face="Comic Sans MS" size=2>NH2(in
  incoming monomer): The NH2 group in each amino acid is “enabled” before the
  COOH group</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>You should distinguish between Seed,
  free amino acids, COOH-bound, NH2-bound and COOH AND NH2 bound monomers.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0385.htm');">Exercise 4 – Question 2</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0307.htm');">Quantitative Options</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Representing each molecule as a
  separate process can be costly</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>In some cases we do not wish to
  represent each molecule as a separate process, but would rather represent
  only molecular species as distinct processes</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>In other cases we would like to follow
  other quantitative aspects. E.g the location of a nucleotide in a polymer.</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0327.htm');">Quantitative Options</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>We will use Logix variables as counters
  to account for the number of molecules we have in each species</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>We will use this counters as message
  multipliers to ensure the correct rate calculation</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>We can also use counters in processes
  to represent location (in polymer) or other relevant quantitative properties</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0328.htm');">Variables</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Variables are denoted by alphanumeric
  strings, beginning with an upper case alphabetic character</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>The string may contain an underscore
  character (_) or be a single underscore character.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>We may use variables as parameters and
  in messages (we can mix in one tuple channels and variables)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>May be used in various arithmetic and
  logic operations (e.g. summation, comparison)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>We’ve all ready seen some examples in
  the spawning loop (e.g.<span style="mso-spacerun: yes">&nbsp;
  </span>{R++}<span style="mso-spacerun: yes">&nbsp; </span>or {R&gt;0} )</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0388.htm');">Variables</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>We are using Logix variables, which can
  be assigned a value only once. Hence, every operation (e.g. R++) creates a new
  variable, which is assigned the new value</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>The new variable is local to the
  process in which the operation was performed, and is distinct from all other
  variables in other processes (that appear to have the same name)</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0329.htm');">Na + Cl <font
face=Wingdings>&agrave;</font><font face="Comic Sans MS"> Na<sup>+</sup> + Cl<sup>-</sup></font></a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Each process: One chemical species (4
  process in the system at all times)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>A counter is maintained in every
  process.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>The counter is initialized according to
  the starting quantities</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Following each communication the
  reactant process decrements its own counter and alerts the relevant product
  process to increment its counter</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>The counter is used as a message
  multiplier</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0308.htm');">Na + Cl <font
face=Wingdings>&agrave;</font><font face="Comic Sans MS"> Na<sup>+</sup> + Cl<sup>-</sup></font></a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>language(psifcp).<br>
  global(e1(90),e2(10)).<br>
  -baserate(infinite).</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>System(N1,N2,N3,N4)+(e3,e4)::=<br>
  <span style="mso-spacerun: yes">&nbsp; </span>&lt;&lt; Na | Cl | Na_plus |
  Cl_minus .</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun: yes">&nbsp;
  </span>Na::= e1 ! N1 * [] , {N1--} , e3 ! [] , Na ;<br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span>e3 ? [] , {N1++} , Na .<br>
  <span style="mso-spacerun: yes">&nbsp; </span>Na_plus::= e2
  ? N3 * [] , {N3--} , e3 ! [] , Na_plus ;<br>
  		 e3 ? [] , {N3++} , Na_plus .<br>
  <span style="mso-spacerun: yes">&nbsp; </span>Cl::= e1
  ? N2 * [] , {N2--} , e4 ! [] , Cl ;<br>
  <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span>e4 ? [] , {N2++} , Cl .<br>
  <span style="mso-spacerun: yes">&nbsp; </span>Cl_minus::= e2
  ! N4 * [] , {N4--} , e4 ! [] , Cl_minus;<br>
  <span style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span>e4 ? [] , {N4++} , Cl_minus <br>
  <span style="mso-spacerun: yes">&nbsp; </span>&gt;&gt; .</font></td>
 </tr>
</table>

</p>

</body>

</html>
